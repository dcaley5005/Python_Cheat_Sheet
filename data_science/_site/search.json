[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Transformation",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "machine_learning_regression.html",
    "href": "machine_learning_regression.html",
    "title": "Regression",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "machine_learning_regression.html#running-code",
    "href": "machine_learning_regression.html#running-code",
    "title": "Regression",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n\nCode\n1 + 1\n\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "data_transformation.html",
    "href": "data_transformation.html",
    "title": "Data Transformation",
    "section": "",
    "text": "This is a Data Transformation cheat sheet meant to be a second brain when performing data science functions."
  },
  {
    "objectID": "data_transformation.html#setting-the-index",
    "href": "data_transformation.html#setting-the-index",
    "title": "Data Transformation",
    "section": "Setting the Index",
    "text": "Setting the Index\n\n\nCode\ncountry_stat.index = [\n    'Canada',\n    'France',\n    'Germany',\n    'Italy',\n    'Japan',\n    'United Kingdom',\n    'United States',\n]\n\ncountry_stat.sort_values(by=['Continent','Population','HDI'], ascending=False)\n\n\n\n\n\n\n  \n    \n      \n      Population\n      GDP\n      Surface Area\n      HDI\n      Continent\n    \n  \n  \n    \n      Germany\n      80.940\n      3874437\n      357114\n      0.916\n      Europe\n    \n    \n      United Kingdom\n      64.511\n      2950039\n      242495\n      0.907\n      Europe\n    \n    \n      France\n      63.951\n      2833687\n      640679\n      0.888\n      Europe\n    \n    \n      Italy\n      60.665\n      2167744\n      301336\n      0.873\n      Europe\n    \n    \n      Japan\n      127.061\n      4602367\n      377930\n      0.891\n      Asia\n    \n    \n      United States\n      318.523\n      17348075\n      9525067\n      0.915\n      America\n    \n    \n      Canada\n      35.467\n      1785387\n      9984670\n      0.913\n      America"
  },
  {
    "objectID": "data_transformation.html#inspecting-datatypes",
    "href": "data_transformation.html#inspecting-datatypes",
    "title": "Data Transformation",
    "section": "Inspecting DataTypes",
    "text": "Inspecting DataTypes\n\n\nCode\nbtc_price.dtypes\n\n\nPrice    float64\ndtype: object"
  },
  {
    "objectID": "data_transformation.html#updating-string-using-to-date-time",
    "href": "data_transformation.html#updating-string-using-to-date-time",
    "title": "Data Transformation",
    "section": "Updating String Using to Date Time",
    "text": "Updating String Using to Date Time\n\n\nCode\nbtc_price = btc_price.reset_index()\nbtc_price['Timestamp'] = pd.to_datetime(btc_price['Timestamp'])\nbtc_price.dtypes\n\n\nTimestamp    datetime64[ns]\nPrice               float64\ndtype: object"
  },
  {
    "objectID": "data_transformation.html#filtering-data-time",
    "href": "data_transformation.html#filtering-data-time",
    "title": "Data Transformation",
    "section": "Filtering Data Time",
    "text": "Filtering Data Time\n\n\nCode\nbtc_price.set_index('Timestamp', inplace=True)\nbtc_price.loc['2017-09-29':'2017-10-05']\n\n\n\n\n\n\n  \n    \n      \n      Price\n    \n    \n      Timestamp\n      \n    \n  \n  \n    \n      2017-09-29\n      4193.574667\n    \n    \n      2017-09-30\n      4335.368317\n    \n    \n      2017-10-01\n      4360.722967\n    \n    \n      2017-10-02\n      4386.883750\n    \n    \n      2017-10-03\n      4293.306600\n    \n    \n      2017-10-04\n      4225.175000\n    \n    \n      2017-10-05\n      4338.852000"
  },
  {
    "objectID": "data_transformation.html#diff-time-calc",
    "href": "data_transformation.html#diff-time-calc",
    "title": "Data Transformation",
    "section": "Diff Time Calc",
    "text": "Diff Time Calc\n\n\nCode\nimport datetime\n\nyear = datetime.date.today().year\n\nmarvel_df['years_since'] = year - marvel_df['first_appearance']\nmarvel_df\n\n\n\n\n\n\n  \n    \n      \n      name\n      sex\n      first_appearance\n      years_since\n    \n  \n  \n    \n      0\n      Spider-Man\n      male\n      1962\n      61\n    \n    \n      1\n      Captain America\n      male\n      1941\n      82\n    \n    \n      2\n      Wolverine\n      male\n      1974\n      49\n    \n    \n      3\n      Iron Man\n      male\n      1963\n      60\n    \n    \n      4\n      Thor\n      male\n      1963\n      60\n    \n    \n      5\n      Thing\n      male\n      1961\n      62\n    \n    \n      6\n      Mister Fantastic\n      male\n      1961\n      62\n    \n    \n      7\n      Hulk\n      male\n      1962\n      61\n    \n    \n      8\n      Beast\n      male\n      1963\n      60\n    \n    \n      9\n      Invisible Woman\n      female\n      1961\n      62\n    \n    \n      10\n      Storm\n      female\n      1975\n      48\n    \n    \n      11\n      Namor\n      male\n      1939\n      84\n    \n    \n      12\n      Hawkeye\n      male\n      1964\n      59\n    \n    \n      13\n      Daredevil\n      male\n      1964\n      59\n    \n    \n      14\n      Doctor Strange\n      male\n      1963\n      60\n    \n    \n      15\n      Hank Pym\n      male\n      1962\n      61\n    \n    \n      16\n      Scarlet Witch\n      female\n      1964\n      59\n    \n    \n      17\n      Wasp\n      female\n      1963\n      60\n    \n    \n      18\n      Black Widow\n      female\n      1964\n      59\n    \n    \n      19\n      Vision\n      male\n      1968\n      55"
  },
  {
    "objectID": "data_transformation.html#convert-date-time-to-year-or-month",
    "href": "data_transformation.html#convert-date-time-to-year-or-month",
    "title": "Data Transformation",
    "section": "Convert Date Time To Year or Month",
    "text": "Convert Date Time To Year or Month\n\n\nCode\nsales['Year'] = sales['Date'].dt.year\nsales['Month'] = sales['Date'].dt.month\nsales\n\n\n\n\n\n\n  \n    \n      \n      Date\n      Day\n      Month\n      Year\n      Customer_Age\n      Age_Group\n      Customer_Gender\n      Country\n      State\n      Product_Category\n      Sub_Category\n      Product\n      Order_Quantity\n      Unit_Cost\n      Unit_Price\n      Profit\n      Cost\n      Revenue\n    \n  \n  \n    \n      0\n      2013-11-26\n      26\n      11\n      2013\n      19\n      Youth (<25)\n      M\n      Canada\n      British Columbia\n      Accessories\n      Bike Racks\n      Hitch Rack - 4-Bike\n      8\n      45\n      120\n      590\n      360\n      950\n    \n    \n      1\n      2015-11-26\n      26\n      11\n      2015\n      19\n      Youth (<25)\n      M\n      Canada\n      British Columbia\n      Accessories\n      Bike Racks\n      Hitch Rack - 4-Bike\n      8\n      45\n      120\n      590\n      360\n      950\n    \n    \n      2\n      2014-03-23\n      23\n      3\n      2014\n      49\n      Adults (35-64)\n      M\n      Australia\n      New South Wales\n      Accessories\n      Bike Racks\n      Hitch Rack - 4-Bike\n      23\n      45\n      120\n      1366\n      1035\n      2401\n    \n    \n      3\n      2016-03-23\n      23\n      3\n      2016\n      49\n      Adults (35-64)\n      M\n      Australia\n      New South Wales\n      Accessories\n      Bike Racks\n      Hitch Rack - 4-Bike\n      20\n      45\n      120\n      1188\n      900\n      2088\n    \n    \n      4\n      2014-05-15\n      15\n      5\n      2014\n      47\n      Adults (35-64)\n      F\n      Australia\n      New South Wales\n      Accessories\n      Bike Racks\n      Hitch Rack - 4-Bike\n      4\n      45\n      120\n      238\n      180\n      418\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      113031\n      2016-04-12\n      12\n      4\n      2016\n      41\n      Adults (35-64)\n      M\n      United Kingdom\n      England\n      Clothing\n      Vests\n      Classic Vest, S\n      3\n      24\n      64\n      112\n      72\n      184\n    \n    \n      113032\n      2014-04-02\n      2\n      4\n      2014\n      18\n      Youth (<25)\n      M\n      Australia\n      Queensland\n      Clothing\n      Vests\n      Classic Vest, M\n      22\n      24\n      64\n      655\n      528\n      1183\n    \n    \n      113033\n      2016-04-02\n      2\n      4\n      2016\n      18\n      Youth (<25)\n      M\n      Australia\n      Queensland\n      Clothing\n      Vests\n      Classic Vest, M\n      22\n      24\n      64\n      655\n      528\n      1183\n    \n    \n      113034\n      2014-03-04\n      4\n      3\n      2014\n      37\n      Adults (35-64)\n      F\n      France\n      Seine (Paris)\n      Clothing\n      Vests\n      Classic Vest, L\n      24\n      24\n      64\n      684\n      576\n      1260\n    \n    \n      113035\n      2016-03-04\n      4\n      3\n      2016\n      37\n      Adults (35-64)\n      F\n      France\n      Seine (Paris)\n      Clothing\n      Vests\n      Classic Vest, L\n      23\n      24\n      64\n      655\n      552\n      1207\n    \n  \n\n113036 rows × 18 columns"
  },
  {
    "objectID": "data_transformation.html#splitting-string-into-two-columns",
    "href": "data_transformation.html#splitting-string-into-two-columns",
    "title": "Data Transformation",
    "section": "Splitting String into Two Columns",
    "text": "Splitting String into Two Columns\nIn this example we split the county and state from each other\n\n\nCode\ncensus_county = pd.read_csv(\"data/census_county.csv\")\n\ncensus_county[[\"state\",\"county\",\"NAME\"]].head()\n\n\nnew = census_county[\"NAME\"].str.split(\", \", expand = True)\ncensus_county[\"county_name\"] = new[0]\ncensus_county[\"state_name\"] = new[1]\n\ncensus_county.drop(columns=['NAME'], inplace=True)\ncensus_county.head()\n\n\n\n\n\n\n  \n    \n      \n      state\n      county\n      median_income\n      population\n      year\n      county_name\n      state_name\n    \n  \n  \n    \n      0\n      37\n      43\n      36711.0\n      10506\n      2011\n      Clay County\n      North Carolina\n    \n    \n      1\n      37\n      51\n      44861.0\n      316478\n      2011\n      Cumberland County\n      North Carolina\n    \n    \n      2\n      37\n      81\n      46288.0\n      483081\n      2011\n      Guilford County\n      North Carolina\n    \n    \n      3\n      37\n      99\n      36826.0\n      39574\n      2011\n      Jackson County\n      North Carolina\n    \n    \n      4\n      37\n      139\n      45298.0\n      40511\n      2011\n      Pasquotank County\n      North Carolina"
  },
  {
    "objectID": "data_transformation.html#understanding-the-data",
    "href": "data_transformation.html#understanding-the-data",
    "title": "Data Transformation",
    "section": "Understanding the Data",
    "text": "Understanding the Data\n\n\nCode\nsales.shape\n\n\n(113036, 18)\n\n\n\n\nCode\nsales.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 113036 entries, 0 to 113035\nData columns (total 18 columns):\n #   Column            Non-Null Count   Dtype         \n---  ------            --------------   -----         \n 0   Date              113036 non-null  datetime64[ns]\n 1   Day               113036 non-null  int64         \n 2   Month             113036 non-null  int64         \n 3   Year              113036 non-null  int64         \n 4   Customer_Age      113036 non-null  int64         \n 5   Age_Group         113036 non-null  object        \n 6   Customer_Gender   113036 non-null  object        \n 7   Country           113036 non-null  object        \n 8   State             113036 non-null  object        \n 9   Product_Category  113036 non-null  object        \n 10  Sub_Category      113036 non-null  object        \n 11  Product           113036 non-null  object        \n 12  Order_Quantity    113036 non-null  int64         \n 13  Unit_Cost         113036 non-null  int64         \n 14  Unit_Price        113036 non-null  int64         \n 15  Profit            113036 non-null  int64         \n 16  Cost              113036 non-null  int64         \n 17  Revenue           113036 non-null  int64         \ndtypes: datetime64[ns](1), int64(10), object(7)\nmemory usage: 15.5+ MB\n\n\n\n\nCode\nsales.columns\n\n\nIndex(['Date', 'Day', 'Month', 'Year', 'Customer_Age', 'Age_Group',\n       'Customer_Gender', 'Country', 'State', 'Product_Category',\n       'Sub_Category', 'Product', 'Order_Quantity', 'Unit_Cost', 'Unit_Price',\n       'Profit', 'Cost', 'Revenue'],\n      dtype='object')"
  },
  {
    "objectID": "data_transformation.html#summary-statistics",
    "href": "data_transformation.html#summary-statistics",
    "title": "Data Transformation",
    "section": "Summary Statistics",
    "text": "Summary Statistics\n\n\nCode\nsales.describe()\n\n\n\n\n\n\n  \n    \n      \n      Day\n      Month\n      Year\n      Customer_Age\n      Order_Quantity\n      Unit_Cost\n      Unit_Price\n      Profit\n      Cost\n      Revenue\n    \n  \n  \n    \n      count\n      113036.000000\n      113036.000000\n      113036.000000\n      113036.000000\n      113036.000000\n      113036.000000\n      113036.000000\n      113036.000000\n      113036.000000\n      113036.000000\n    \n    \n      mean\n      15.665753\n      6.453024\n      2014.401739\n      35.919212\n      11.901660\n      267.296366\n      452.938427\n      285.051665\n      469.318695\n      754.370360\n    \n    \n      std\n      8.781567\n      3.478198\n      1.272510\n      11.021936\n      9.561857\n      549.835483\n      922.071219\n      453.887443\n      884.866118\n      1309.094674\n    \n    \n      min\n      1.000000\n      1.000000\n      2011.000000\n      17.000000\n      1.000000\n      1.000000\n      2.000000\n      -30.000000\n      1.000000\n      2.000000\n    \n    \n      25%\n      8.000000\n      4.000000\n      2013.000000\n      28.000000\n      2.000000\n      2.000000\n      5.000000\n      29.000000\n      28.000000\n      63.000000\n    \n    \n      50%\n      16.000000\n      6.000000\n      2014.000000\n      35.000000\n      10.000000\n      9.000000\n      24.000000\n      101.000000\n      108.000000\n      223.000000\n    \n    \n      75%\n      23.000000\n      10.000000\n      2016.000000\n      43.000000\n      20.000000\n      42.000000\n      70.000000\n      358.000000\n      432.000000\n      800.000000\n    \n    \n      max\n      31.000000\n      12.000000\n      2016.000000\n      87.000000\n      32.000000\n      2171.000000\n      3578.000000\n      15096.000000\n      42978.000000\n      58074.000000\n    \n  \n\n\n\n\n\n\nCode\nsales[['Age_Group','Unit_Price']].groupby('Age_Group').describe()\n\n\n\n\n\n\n  \n    \n      \n      Unit_Price\n    \n    \n      \n      count\n      mean\n      std\n      min\n      25%\n      50%\n      75%\n      max\n    \n    \n      Age_Group\n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Adults (35-64)\n      55824.0\n      455.185046\n      923.478763\n      2.0\n      5.0\n      25.0\n      70.0\n      3578.0\n    \n    \n      Seniors (64+)\n      730.0\n      156.260274\n      523.610077\n      2.0\n      5.0\n      22.0\n      35.0\n      3578.0\n    \n    \n      Young Adults (25-34)\n      38654.0\n      489.569928\n      946.438451\n      2.0\n      5.0\n      25.0\n      540.0\n      3578.0\n    \n    \n      Youth (<25)\n      17828.0\n      378.628674\n      868.912104\n      2.0\n      5.0\n      21.0\n      54.0\n      3578.0\n    \n  \n\n\n\n\n\n\nCode\n# Number of elements in the data\nsales.size\n\n\n2034648"
  },
  {
    "objectID": "data_transformation.html#data-types",
    "href": "data_transformation.html#data-types",
    "title": "Data Transformation",
    "section": "Data Types",
    "text": "Data Types\n\n\nCode\nsales.dtypes\n\n\nDate                datetime64[ns]\nDay                          int64\nMonth                        int64\nYear                         int64\nCustomer_Age                 int64\nAge_Group                   object\nCustomer_Gender             object\nCountry                     object\nState                       object\nProduct_Category            object\nSub_Category                object\nProduct                     object\nOrder_Quantity               int64\nUnit_Cost                    int64\nUnit_Price                   int64\nProfit                       int64\nCost                         int64\nRevenue                      int64\ndtype: object\n\n\n\n\nCode\nsales['Unit_Cost'].describe()\n\n\ncount    113036.000000\nmean        267.296366\nstd         549.835483\nmin           1.000000\n25%           2.000000\n50%           9.000000\n75%          42.000000\nmax        2171.000000\nName: Unit_Cost, dtype: float64"
  },
  {
    "objectID": "data_transformation.html#individual-statistics",
    "href": "data_transformation.html#individual-statistics",
    "title": "Data Transformation",
    "section": "Individual Statistics",
    "text": "Individual Statistics\n\n\nCode\nsales['Unit_Cost'].mean()\n\n\n267.296365759581\n\n\n\n\nCode\nsales['Unit_Cost'].median()\n\n\n9.0\n\n\n\n\nCode\nsales['Unit_Cost'].min(), sales['Unit_Cost'].max()\n\n\n(1, 2171)\n\n\n\n\nCode\nsales['Unit_Cost'].std()\n\n\n549.8354831075126"
  },
  {
    "objectID": "data_transformation.html#quantiles",
    "href": "data_transformation.html#quantiles",
    "title": "Data Transformation",
    "section": "Quantiles",
    "text": "Quantiles\n\n\nCode\nsales['Unit_Cost'].quantile(0.25)\n\n\n2.0\n\n\n\n\nCode\nsales['Unit_Cost'].quantile([.2, .4, .6, .8, 1])\n\n\n0.2       2.0\n0.4       7.0\n0.6      13.0\n0.8     344.0\n1.0    2171.0\nName: Unit_Cost, dtype: float64"
  },
  {
    "objectID": "data_transformation.html#value-counts",
    "href": "data_transformation.html#value-counts",
    "title": "Data Transformation",
    "section": "Value Counts",
    "text": "Value Counts\n\n\nCode\nsales['Age_Group'].value_counts()\n\n\nAdults (35-64)          55824\nYoung Adults (25-34)    38654\nYouth (<25)             17828\nSeniors (64+)             730\nName: Age_Group, dtype: int64\n\n\n\n\nCode\n sales['Age_Group'].value_counts(normalize=True)\n\n\nAdults (35-64)          0.493860\nYoung Adults (25-34)    0.341962\nYouth (<25)             0.157720\nSeniors (64+)           0.006458\nName: Age_Group, dtype: float64\n\n\n\n\nCode\ncountry_group = sales.groupby(['Country'])\ncountry_group['Age_Group'].value_counts(normalize=True).loc['Australia']\n\n\nAge_Group\nAdults (35-64)          0.434241\nYoung Adults (25-34)    0.380264\nYouth (<25)             0.183072\nSeniors (64+)           0.002423\nName: Age_Group, dtype: float64\n\n\n\n\nCode\nsales.dtypes.value_counts()\n\n\nint64             10\nobject             7\ndatetime64[ns]     1\ndtype: int64"
  },
  {
    "objectID": "data_transformation.html#bar-graph",
    "href": "data_transformation.html#bar-graph",
    "title": "Data Transformation",
    "section": "Bar Graph",
    "text": "Bar Graph\n\n\nCode\npd.DataFrame(sales['Age_Group'].value_counts(normalize = True)).plot(kind = 'bar', figsize = (10,5))\n\n\n<Axes: >"
  },
  {
    "objectID": "data_transformation.html#correlations",
    "href": "data_transformation.html#correlations",
    "title": "Data Transformation",
    "section": "Correlations",
    "text": "Correlations\n\n\nCode\ncorr = sales.select_dtypes(include='int64').corr(numeric_only = False)\ncorr\n\n\n\n\n\n\n  \n    \n      \n      Day\n      Month\n      Year\n      Customer_Age\n      Order_Quantity\n      Unit_Cost\n      Unit_Price\n      Profit\n      Cost\n      Revenue\n    \n  \n  \n    \n      Day\n      1.000000\n      0.014963\n      -0.007635\n      -0.014296\n      -0.002412\n      0.003133\n      0.003207\n      0.004623\n      0.003329\n      0.003853\n    \n    \n      Month\n      0.014963\n      1.000000\n      -0.315359\n      -0.051234\n      0.028175\n      -0.021202\n      -0.021218\n      -0.002004\n      -0.006700\n      -0.005224\n    \n    \n      Year\n      -0.007635\n      -0.315359\n      1.000000\n      0.040994\n      0.123169\n      -0.217575\n      -0.213673\n      -0.181525\n      -0.215604\n      -0.208673\n    \n    \n      Customer_Age\n      -0.014296\n      -0.051234\n      0.040994\n      1.000000\n      0.026887\n      -0.021374\n      -0.020262\n      0.004319\n      -0.016013\n      -0.009326\n    \n    \n      Order_Quantity\n      -0.002412\n      0.028175\n      0.123169\n      0.026887\n      1.000000\n      -0.515835\n      -0.515925\n      -0.238863\n      -0.340382\n      -0.312895\n    \n    \n      Unit_Cost\n      0.003133\n      -0.021202\n      -0.217575\n      -0.021374\n      -0.515835\n      1.000000\n      0.997894\n      0.741020\n      0.829869\n      0.817865\n    \n    \n      Unit_Price\n      0.003207\n      -0.021218\n      -0.213673\n      -0.020262\n      -0.515925\n      0.997894\n      1.000000\n      0.749870\n      0.826301\n      0.818522\n    \n    \n      Profit\n      0.004623\n      -0.002004\n      -0.181525\n      0.004319\n      -0.238863\n      0.741020\n      0.749870\n      1.000000\n      0.902233\n      0.956572\n    \n    \n      Cost\n      0.003329\n      -0.006700\n      -0.215604\n      -0.016013\n      -0.340382\n      0.829869\n      0.826301\n      0.902233\n      1.000000\n      0.988758\n    \n    \n      Revenue\n      0.003853\n      -0.005224\n      -0.208673\n      -0.009326\n      -0.312895\n      0.817865\n      0.818522\n      0.956572\n      0.988758\n      1.000000\n    \n  \n\n\n\n\n\n\nCode\npx.imshow(corr)"
  },
  {
    "objectID": "data_transformation.html#reading-csv",
    "href": "data_transformation.html#reading-csv",
    "title": "Data Transformation",
    "section": "Reading CSV",
    "text": "Reading CSV\n\n\nCode\nsales = pd.read_csv(\n    'data/sales_data.csv',\n    parse_dates=['Date']\n)\n\nsales.head()\n\n\n\n\n\n\n  \n    \n      \n      Date\n      Day\n      Month\n      Year\n      Customer_Age\n      Age_Group\n      Customer_Gender\n      Country\n      State\n      Product_Category\n      Sub_Category\n      Product\n      Order_Quantity\n      Unit_Cost\n      Unit_Price\n      Profit\n      Cost\n      Revenue\n    \n  \n  \n    \n      0\n      2013-11-26\n      26\n      November\n      2013\n      19\n      Youth (<25)\n      M\n      Canada\n      British Columbia\n      Accessories\n      Bike Racks\n      Hitch Rack - 4-Bike\n      8\n      45\n      120\n      590\n      360\n      950\n    \n    \n      1\n      2015-11-26\n      26\n      November\n      2015\n      19\n      Youth (<25)\n      M\n      Canada\n      British Columbia\n      Accessories\n      Bike Racks\n      Hitch Rack - 4-Bike\n      8\n      45\n      120\n      590\n      360\n      950\n    \n    \n      2\n      2014-03-23\n      23\n      March\n      2014\n      49\n      Adults (35-64)\n      M\n      Australia\n      New South Wales\n      Accessories\n      Bike Racks\n      Hitch Rack - 4-Bike\n      23\n      45\n      120\n      1366\n      1035\n      2401\n    \n    \n      3\n      2016-03-23\n      23\n      March\n      2016\n      49\n      Adults (35-64)\n      M\n      Australia\n      New South Wales\n      Accessories\n      Bike Racks\n      Hitch Rack - 4-Bike\n      20\n      45\n      120\n      1188\n      900\n      2088\n    \n    \n      4\n      2014-05-15\n      15\n      May\n      2014\n      47\n      Adults (35-64)\n      F\n      Australia\n      New South Wales\n      Accessories\n      Bike Racks\n      Hitch Rack - 4-Bike\n      4\n      45\n      120\n      238\n      180\n      418"
  },
  {
    "objectID": "data_transformation.html#adding-column-names",
    "href": "data_transformation.html#adding-column-names",
    "title": "Data Transformation",
    "section": "Adding Column Names",
    "text": "Adding Column Names\n\n\nCode\nmarvel_data = [\n    ['Spider-Man', 'male', 1962],\n    ['Captain America', 'male', 1941],\n    ['Wolverine', 'male', 1974],\n    ['Iron Man', 'male', 1963],\n    ['Thor', 'male', 1963],\n    ['Thing', 'male', 1961],\n    ['Mister Fantastic', 'male', 1961],\n    ['Hulk', 'male', 1962],\n    ['Beast', 'male', 1963],\n    ['Invisible Woman', 'female', 1961],\n    ['Storm', 'female', 1975],\n    ['Namor', 'male', 1939],\n    ['Hawkeye', 'male', 1964],\n    ['Daredevil', 'male', 1964],\n    ['Doctor Strange', 'male', 1963],\n    ['Hank Pym', 'male', 1962],\n    ['Scarlet Witch', 'female', 1964],\n    ['Wasp', 'female', 1963],\n    ['Black Widow', 'female', 1964],\n    ['Vision', 'male', 1968]\n]\n\nmarvel_df = pd.DataFrame(data=marvel_data,\n                         columns=['name', 'sex', 'first_appearance'])\nmarvel_df\n\n\n\n\n\n\n  \n    \n      \n      name\n      sex\n      first_appearance\n    \n  \n  \n    \n      0\n      Spider-Man\n      male\n      1962\n    \n    \n      1\n      Captain America\n      male\n      1941\n    \n    \n      2\n      Wolverine\n      male\n      1974\n    \n    \n      3\n      Iron Man\n      male\n      1963\n    \n    \n      4\n      Thor\n      male\n      1963\n    \n    \n      5\n      Thing\n      male\n      1961\n    \n    \n      6\n      Mister Fantastic\n      male\n      1961\n    \n    \n      7\n      Hulk\n      male\n      1962\n    \n    \n      8\n      Beast\n      male\n      1963\n    \n    \n      9\n      Invisible Woman\n      female\n      1961\n    \n    \n      10\n      Storm\n      female\n      1975\n    \n    \n      11\n      Namor\n      male\n      1939\n    \n    \n      12\n      Hawkeye\n      male\n      1964\n    \n    \n      13\n      Daredevil\n      male\n      1964\n    \n    \n      14\n      Doctor Strange\n      male\n      1963\n    \n    \n      15\n      Hank Pym\n      male\n      1962\n    \n    \n      16\n      Scarlet Witch\n      female\n      1964\n    \n    \n      17\n      Wasp\n      female\n      1963\n    \n    \n      18\n      Black Widow\n      female\n      1964\n    \n    \n      19\n      Vision\n      male\n      1968"
  },
  {
    "objectID": "data_transformation.html#adding-column-names-when-reading-csv",
    "href": "data_transformation.html#adding-column-names-when-reading-csv",
    "title": "Data Transformation",
    "section": "Adding Column Names When Reading CSV",
    "text": "Adding Column Names When Reading CSV\n\n\nCode\nbtc_price = pd.read_csv(\n    'data/btc-market-price.csv',\n    header=None,\n    names=['Timestamp', 'Price'],\n    index_col=0, # this sets the column in this instance its the first column 1\n    # index_col='Timestamp',  # You can also add the column name\n    parse_dates=True\n)\n\nbtc_price.head()\n\n\n\n\n\n\n  \n    \n      \n      Price\n    \n    \n      Timestamp\n      \n    \n  \n  \n    \n      2017-04-02\n      1099.169125\n    \n    \n      2017-04-03\n      1141.813000\n    \n    \n      2017-04-04\n      1141.600363\n    \n    \n      2017-04-05\n      1133.079314\n    \n    \n      2017-04-06\n      1196.307937"
  },
  {
    "objectID": "data_transformation.html#date-diff-calc",
    "href": "data_transformation.html#date-diff-calc",
    "title": "Data Transformation",
    "section": "Date Diff Calc",
    "text": "Date Diff Calc\n\n\nCode\nimport datetime\n\nyear = datetime.date.today().year\n\nmarvel_df['years_since'] = year - marvel_df['first_appearance']\nmarvel_df\n\n\n\n\n\n\n  \n    \n      \n      name\n      sex\n      first_appearance\n      years_since\n    \n  \n  \n    \n      0\n      Spider-Man\n      male\n      1962\n      61\n    \n    \n      1\n      Captain America\n      male\n      1941\n      82\n    \n    \n      2\n      Wolverine\n      male\n      1974\n      49\n    \n    \n      3\n      Iron Man\n      male\n      1963\n      60\n    \n    \n      4\n      Thor\n      male\n      1963\n      60\n    \n    \n      5\n      Thing\n      male\n      1961\n      62\n    \n    \n      6\n      Mister Fantastic\n      male\n      1961\n      62\n    \n    \n      7\n      Hulk\n      male\n      1962\n      61\n    \n    \n      8\n      Beast\n      male\n      1963\n      60\n    \n    \n      9\n      Invisible Woman\n      female\n      1961\n      62\n    \n    \n      10\n      Storm\n      female\n      1975\n      48\n    \n    \n      11\n      Namor\n      male\n      1939\n      84\n    \n    \n      12\n      Hawkeye\n      male\n      1964\n      59\n    \n    \n      13\n      Daredevil\n      male\n      1964\n      59\n    \n    \n      14\n      Doctor Strange\n      male\n      1963\n      60\n    \n    \n      15\n      Hank Pym\n      male\n      1962\n      61\n    \n    \n      16\n      Scarlet Witch\n      female\n      1964\n      59\n    \n    \n      17\n      Wasp\n      female\n      1963\n      60\n    \n    \n      18\n      Black Widow\n      female\n      1964\n      59\n    \n    \n      19\n      Vision\n      male\n      1968\n      55"
  },
  {
    "objectID": "data_transformation.html#modifying-all",
    "href": "data_transformation.html#modifying-all",
    "title": "Data Transformation",
    "section": "Modifying All",
    "text": "Modifying All\n\n\nCode\nsales['Calculated_Cost'] *= 1.03\nsales['Calculated_Cost'].head()\n\n\n0     370.80\n1     370.80\n2    1066.05\n3     927.00\n4     185.40\nName: Calculated_Cost, dtype: float64"
  },
  {
    "objectID": "data_transformation.html#working-with-loc",
    "href": "data_transformation.html#working-with-loc",
    "title": "Data Transformation",
    "section": "Working with loc",
    "text": "Working with loc\n\n\nCode\nmarvel_df.loc['Vision', 'first_appearance'] = 1964\nmarvel_df\n\n\n\n\n\n\n  \n    \n      \n      name\n      sex\n      first_appearance\n      years_since\n    \n  \n  \n    \n      0\n      Spider-Man\n      male\n      1962.0\n      61.0\n    \n    \n      1\n      Captain America\n      male\n      1941.0\n      82.0\n    \n    \n      2\n      Wolverine\n      male\n      1974.0\n      49.0\n    \n    \n      3\n      Iron Man\n      male\n      1963.0\n      60.0\n    \n    \n      4\n      Thor\n      male\n      1963.0\n      60.0\n    \n    \n      5\n      Thing\n      male\n      1961.0\n      62.0\n    \n    \n      6\n      Mister Fantastic\n      male\n      1961.0\n      62.0\n    \n    \n      7\n      Hulk\n      male\n      1962.0\n      61.0\n    \n    \n      8\n      Beast\n      male\n      1963.0\n      60.0\n    \n    \n      9\n      Invisible Woman\n      female\n      1961.0\n      62.0\n    \n    \n      10\n      Storm\n      female\n      1975.0\n      48.0\n    \n    \n      11\n      Namor\n      male\n      1939.0\n      84.0\n    \n    \n      12\n      Hawkeye\n      male\n      1964.0\n      59.0\n    \n    \n      13\n      Daredevil\n      male\n      1964.0\n      59.0\n    \n    \n      14\n      Doctor Strange\n      male\n      1963.0\n      60.0\n    \n    \n      15\n      Hank Pym\n      male\n      1962.0\n      61.0\n    \n    \n      16\n      Scarlet Witch\n      female\n      1964.0\n      59.0\n    \n    \n      17\n      Wasp\n      female\n      1963.0\n      60.0\n    \n    \n      18\n      Black Widow\n      female\n      1964.0\n      59.0\n    \n    \n      19\n      Vision\n      male\n      1968.0\n      55.0\n    \n    \n      Vision\n      NaN\n      NaN\n      1964.0\n      NaN\n    \n  \n\n\n\n\n\n\nCode\nsales.loc[sales['Country'] == 'France', 'Revenue'].head()\n\n\n50     787\n51     787\n52    2957\n53    2851\n60     626\nName: Revenue, dtype: int64\n\n\n\n\nCode\nsales.loc[sales['Country'] == 'France', 'Revenue'] *= 1.10\nsales.loc[sales['Country'] == 'France', 'Revenue'].head()\n\n\n50     865.7\n51     865.7\n52    3252.7\n53    3136.1\n60     688.6\nName: Revenue, dtype: float64\n\n\n\n\nCode\ncrisis = pd.Series([-1_000_000, -0.3], index=['GDP', 'HDI'])\ncrisis\n\n\nGDP   -1000000.0\nHDI         -0.3\ndtype: float64\n\n\n\n\nCode\ncrisis[['GDP', 'HDI']] + crisis\n\n\nGDP   -2000000.0\nHDI         -0.6\ndtype: float64"
  },
  {
    "objectID": "data_transformation.html#wide-to-long",
    "href": "data_transformation.html#wide-to-long",
    "title": "Data Transformation",
    "section": "Wide to Long",
    "text": "Wide to Long\n\n\nCode\nd1 = {\"Name\": [\"Pankaj\", \"Lisa\", \"David\"], \"ID\": [1, 2, 3], \"Role\": [\"CEO\", \"Editor\", \"Author\"]}\ndf_wide = pd.DataFrame(d1)\ndf_wide\n\n\n\n\n\n\n  \n    \n      \n      Name\n      ID\n      Role\n    \n  \n  \n    \n      0\n      Pankaj\n      1\n      CEO\n    \n    \n      1\n      Lisa\n      2\n      Editor\n    \n    \n      2\n      David\n      3\n      Author\n    \n  \n\n\n\n\n\n\nCode\ndf_long = pd.melt(df_wide, id_vars=[\"ID\"], value_vars=[\"Name\", \"Role\"], var_name=\"Attribute\", value_name=\"Value\")\ndf_long\n\n\n\n\n\n\n  \n    \n      \n      ID\n      Attribute\n      Value\n    \n  \n  \n    \n      0\n      1\n      Name\n      Pankaj\n    \n    \n      1\n      2\n      Name\n      Lisa\n    \n    \n      2\n      3\n      Name\n      David\n    \n    \n      3\n      1\n      Role\n      CEO\n    \n    \n      4\n      2\n      Role\n      Editor\n    \n    \n      5\n      3\n      Role\n      Author\n    \n  \n\n\n\n\n\n\nCode\nyear_list=list(df_wide.columns)\ndf_long = pd.melt(df_wide, value_vars=year_list,value_name='Avg. Price ($)', ignore_index=False).reset_index()\ndf_long\n\n\n\n\n\n\n  \n    \n      \n      index\n      variable\n      Avg. Price ($)\n    \n  \n  \n    \n      0\n      0\n      Name\n      Pankaj\n    \n    \n      1\n      1\n      Name\n      Lisa\n    \n    \n      2\n      2\n      Name\n      David\n    \n    \n      3\n      0\n      ID\n      1\n    \n    \n      4\n      1\n      ID\n      2\n    \n    \n      5\n      2\n      ID\n      3\n    \n    \n      6\n      0\n      Role\n      CEO\n    \n    \n      7\n      1\n      Role\n      Editor\n    \n    \n      8\n      2\n      Role\n      Author"
  },
  {
    "objectID": "data_transformation.html#long-to-wide",
    "href": "data_transformation.html#long-to-wide",
    "title": "Data Transformation",
    "section": "Long to Wide",
    "text": "Long to Wide\n\n\nCode\n# https://beta.bls.gov/dataQuery/find?fq=survey:[ap]&s=popularity:D\n# This data came from bls\ndf_long = pd.read_csv(\"data/file.csv\")\ndf_long\n\n\n\n\n\n\n  \n    \n      \n      Series ID\n      Item\n      Year Month\n      Avg. Price ($)\n    \n  \n  \n    \n      0\n      APU0000702111\n      Bread, whilte per lb\n      2020 Jan\n      1.351\n    \n    \n      1\n      APU0000702111\n      Bread, whilte per lb\n      2020 Feb\n      1.375\n    \n    \n      2\n      APU0000702111\n      Bread, whilte per lb\n      2020 Mar\n      1.374\n    \n    \n      3\n      APU0000702111\n      Bread, whilte per lb\n      2020 Apr\n      1.406\n    \n    \n      4\n      APU0000702111\n      Bread, whilte per lb\n      2020 May\n      1.412\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      97\n      APU0000709112\n      Milk, Whole per gal\n      2022 Jun\n      4.153\n    \n    \n      98\n      APU0000709112\n      Milk, Whole per gal\n      2022 Jul\n      4.156\n    \n    \n      99\n      APU0000709112\n      Milk, Whole per gal\n      2022 Aug\n      4.194\n    \n    \n      100\n      APU0000709112\n      Milk, Whole per gal\n      2022 Sep\n      4.181\n    \n    \n      101\n      APU0000709112\n      Milk, Whole per gal\n      2022 Oct\n      4.184\n    \n  \n\n102 rows × 4 columns\n\n\n\n\n\nCode\n# unmelting using pivot()\ndf_wide=pd.pivot(df_long, index=['Series ID','Item'], columns = 'Year Month',values = 'Avg. Price ($)') #Reshape from long to wide\n\ndf_wide\n\n\n\n\n\n\n  \n    \n      \n      Year Month\n      2020 Apr\n      2020 Aug\n      2020 Dec\n      2020 Feb\n      2020 Jan\n      2020 Jul\n      2020 Jun\n      2020 Mar\n      2020 May\n      2020 Nov\n      ...\n      2022 Apr\n      2022 Aug\n      2022 Feb\n      2022 Jan\n      2022 Jul\n      2022 Jun\n      2022 Mar\n      2022 May\n      2022 Oct\n      2022 Sep\n    \n    \n      Series ID\n      Item\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      APU0000702111\n      Bread, whilte per lb\n      1.406\n      1.495\n      1.538\n      1.375\n      1.351\n      1.485\n      1.474\n      1.374\n      1.412\n      1.515\n      ...\n      1.612\n      1.756\n      1.578\n      1.555\n      1.715\n      1.691\n      1.607\n      1.606\n      1.814\n      1.749\n    \n    \n      APU0000708111\n      Eggs, large per doz\n      2.019\n      1.328\n      1.481\n      1.449\n      1.461\n      1.401\n      1.554\n      1.525\n      1.640\n      1.450\n      ...\n      2.520\n      3.116\n      2.005\n      1.929\n      2.936\n      2.707\n      2.046\n      2.863\n      3.419\n      2.902\n    \n    \n      APU0000709112\n      Milk, Whole per gal\n      3.267\n      3.406\n      3.535\n      3.196\n      3.253\n      3.255\n      3.198\n      3.248\n      3.210\n      3.425\n      ...\n      4.012\n      4.194\n      3.875\n      3.787\n      4.156\n      4.153\n      3.917\n      4.204\n      4.184\n      4.181\n    \n  \n\n3 rows × 34 columns"
  }
]