---
title: "Data Visualization"
---

# Packages
## Visualization
```{python}

import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

```


## Transformation
```{python}

import pandas as pd
import numpy as np

```



# Data
```{python echo=False}

sales = pd.read_csv(
    'data/sales_data.csv',
    parse_dates=['Date']
)

sales = sales.sort_values(by=['Date'], ascending = True)

Quantity_total = sales.groupby(['State'])['Order_Quantity'].sum().reset_index()

# Group the data by state and calculate the sum of the order quantity for each state
sales_stacked_ratio = sales.groupby(['State','Age_Group'])['Order_Quantity'].sum().reset_index()

# Divide the Order Quantity by the state total to get the percentage of the order quantity for each age group in each state
sales_stacked_ratio['Percent_Weight'] = sales_stacked_ratio['Order_Quantity']/ sales_stacked_ratio.groupby('State')['Order_Quantity'].transform('sum')

```



# Bar Chart
```{python}

fig = px.bar(Quantity_total, x="State", y="Order_Quantity", 
            title="Age Group Share by State")

fig

```


# Stacked Bar Chart
```{python}

fig = px.bar(sales_stacked_ratio, x="State", y="Percent_Weight", color="Age_Group", 
            title="Age Group Share by State")


```

# Rotate Labels
```{python}

fig = px.bar(sales_stacked_ratio, x="State", y="Percent_Weight", color="Age_Group", 
            title="Age Group Share by State")
            
fig.update_xaxes(tickangle=45)

```

# Tick Labels
```{python}

fig.update_yaxes(tickformat=".0%")

```




# Histogram
```{python}

px.histogram(sales, x = 'Unit_Cost')

```

# Facet Wrap
```{python}

px.histogram(sales, x = 'Unit_Cost', facet_col='Age_Group', facet_col_wrap=2)

```

# Scatter
```{python}

df = px.data.gapminder()
fig = px.scatter(df, x="gdpPercap", y="lifeExp", color="continent", size="pop",
           hover_name="country", size_max=60)
           
fig
```

# Log Update
```{python}

fig = px.scatter(df, x="gdpPercap", y="lifeExp", color="continent", size="pop",
           hover_name="country", log_x=True, size_max=60)
           
fig

```


# Multiple Fig Updates
```{python}

fig.update_xaxes(showgrid=False, zeroline=False)
fig

```

# Types of Correlations
```{python}

x = np.arange(100)
delta = np.random.uniform(-10,10, size=(100,))
df = pd.DataFrame()
df['days'] = np.arange(100)
df['values_linear'] = .4 * x +3 + delta

```

## Pearson
```{python}

px.scatter(df, x = 'days', y='values_linear')


```


```{python}

pearson_correlation = df.corr()['days']['values_linear']
spearman_correlation = df.corr(method='spearman')['days']['values_linear']

print("Pearson Correlation: {:.2f}%".format(pearson_correlation*100))
print("Spearman Correlation: {:.2f}%".format(spearman_correlation*100))

```


## Spearman
```{python}

# fit polynomial regression model
z = np.polyfit(x, df['values_linear'], 100)
f = np.poly1d(z)

# evaluate polynomial at each value of x
df['values_polynomial'] = np.polyval(f, x)
df['values_polynomial'] = df['values_polynomial'] * df['values_linear']
df['values_polynomial'] = df['values_polynomial']

```

```{python}

px.scatter(df, x = 'days', y='values_polynomial')

```


```{python}

pearson_correlation = df.corr()['days']['values_polynomial']
spearman_correlation = df.corr(method='spearman')['days']['values_polynomial']

print("Pearson Correlation: {:.2f}%".format(pearson_correlation*100))
print("Spearman Correlation: {:.2f}%".format(spearman_correlation*100))

```

# Line Graph
```{python}

rents = pd.read_csv('data/zillow_data.csv')
px.line(rents, x = 'rent_date', y = 'avg_rents', color='RegionName')

### We can see in the above line that there is missing data. Let's use interpolate

```





